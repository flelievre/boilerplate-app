import {
  useEffect,
  useContext,
  useState,
  useRef,
} from 'react';
import {
  orderBy,
  find,
} from 'lodash';
import {
  useOutletContext,
  useLocation,
  useNavigate,
} from 'react-router';
import {
  BreadcrumbsContext,
  AppContext,
  useBoolean,
} from '@/utils';
import {
  axios,
  VITE_BACKEND_URL,
} from '@/config';
import ROUTES from '@/routes';

const useSubscribePage = () => {
  const {
    t,
  } = useContext(AppContext);

  const {
    setActiveDrawerLinkKey,
    generateOrganizationRoute,
    currentOrganization: {
      _id: currentOrganizationId = '',
      addressLine1: currentOrganizationAddressLine1 = '',
    } = {},
  } = useOutletContext();

  const {
    setBreadcrumbs,
  } = useContext(BreadcrumbsContext);

  const navigate = useNavigate();

  const {
    search,
  } = useLocation();
  const queryParams = new URLSearchParams(search);
  const priceIdInUrl = queryParams.get('priceId');
  const subscriptionIdInUrl = queryParams.get('subscriptionId');

  const [products, setProducts] = useState([]);
  const [isInitiating, setIsInitiating] = useState(true);
  const [selectedPriceId, setSelectedPriceId] = useState('');
  const [subscription, setSubscription] = useState(null);
  const {
    value: isShowingMonthlyPrice,
    setValue: setIsShowingMonthlyPrice,
    toggleValue: toggleYearlyOrMonthlyPriceBasic,
  } = useBoolean();

  console.log(subscription);

  const hasLoadedRef = useRef(false);

  useEffect(() => {
    if (hasLoadedRef.current) return;
    hasLoadedRef.current = true;

    const createSubscription = () => (
      axios.requestWithAuth(
        'post',
        `${VITE_BACKEND_URL}/${ROUTES.organizations}/${currentOrganizationId}/${ROUTES.subscriptions}`,
      )
    );
    const getOrCreateSubscription = async () => {
      let validSubscriptionId = subscriptionIdInUrl || '';
      if (validSubscriptionId !== '') {
        try {
          const {
            data: {
              data: {
                subscription,
              } = {},
            } = {},
          } = await axios.requestWithAuth(
            'get',
            `${VITE_BACKEND_URL}/${ROUTES.organizations}/${currentOrganizationId}/${ROUTES.subscriptions}/${subscriptionIdInUrl}`,
          );
          validSubscriptionId = subscription._id;
          setSubscription(subscription);
        } catch (e) {
          console.log(e);
          validSubscriptionId = '';
        }
      }
      if (validSubscriptionId === '') {
        const {
          data: {
            data: {
              subscription,
            } = {},
          } = {},
        } = await createSubscription();
        validSubscriptionId = subscription._id;
        queryParams.set('subscriptionId', validSubscriptionId);
        hasLoadedRef.current = false;
        navigate({ search: queryParams.toString() }, { replace: true });
      }
    };
    getOrCreateSubscription();
  }, [subscriptionIdInUrl]);

  const toggleYearlyOrMonthlyPrice = () => {
    setSelectedPriceId('');
    toggleYearlyOrMonthlyPriceBasic();
  };

  const hasOrgAnAddress = (currentOrganizationAddressLine1 !== '');

  useEffect(() => {
    setActiveDrawerLinkKey(ROUTES.subscribe);
    setBreadcrumbs([
      {
        label: 'Subscribe',
        to: generateOrganizationRoute(ROUTES.subscribe),
        sx: {
          color: 'primary.main',
        },
        icon: 'heroicons:credit-card-solid',
      },
    ]);
  }, []);

  useEffect(() => {
    const getProducts = async () => {
      setIsInitiating(true);
      try {
        const {
          data: {
            data: {
              products: fetchedProducts,
            } = {},
          } = {},
        } = await axios.get(`${VITE_BACKEND_URL}/products`);
        setProducts(fetchedProducts);
      } catch (e) {
        console.error(e);
      }
    };
    getProducts();
  }, []);

  const productFromPriceIdInUrl = products.find(({
    prices = [],
  }) => (
    prices.some(({
      id,
    }) => (
      id === priceIdInUrl
    ))
  ));

  const priceFromPriceIdInUrl = productFromPriceIdInUrl?.prices?.find(({
    id,
  }) => (
    id === priceIdInUrl
  ));

  const isSelectedPriceValid = !!priceFromPriceIdInUrl;

  const [
    step,
    setStep,
  ] = useState(0);

  useEffect(() => {
    if (products.length > 0) {
      if (isSelectedPriceValid) {
        setSelectedPriceId(priceIdInUrl);
        setStep(
          hasOrgAnAddress
            ? 2
            : 1,
        );
        setIsShowingMonthlyPrice(priceFromPriceIdInUrl.interval === 'month');
      } else {
        setSelectedPriceId('');
      }
      setIsInitiating(false);
    }
  }, [
    JSON.stringify(products),
    priceIdInUrl,
  ]);

  const productsWithMonthlyOrYearlyPrice = orderBy(
    products.map(({
      prices = [],
      description = null,
      ...productOtherProps
    }) => ({
      price: find(
        prices.map(({
          unitAmount,
          ...priceOtherProps
        }) => ({
          unitAmount: isShowingMonthlyPrice
            ? unitAmount
            : +`${(unitAmount / 12).toFixed(0)}`,
          originalAmount: unitAmount,
          ...priceOtherProps,
        })),
        {
          interval: isShowingMonthlyPrice
            ? 'month'
            : 'year',
        },
      ),
      description: description
        ? description.split('\\n')
        : [],
      ...productOtherProps,
    })),
    'price.unitAmount',
  );

  const goNext = () => {
    setStep((prev) => {
      if (prev === 2) {
        return prev;
      }
      return prev + 1;
    });
  };

  const goPrevious = () => {
    if (step === 1) {
      setSelectedPriceId('');
      queryParams.delete('priceId');

      navigate({ search: queryParams.toString() }, { replace: true });
    }
    setStep((prev) => {
      if (prev === 0) {
        return prev;
      }
      return prev - 1;
    });
  };

  const selectPlan = (priceId) => navigate(
    generateOrganizationRoute(`${ROUTES.subscribe}?priceId=${priceId}`),
  );

  const [
    {
      name: productName = '',
    } = {},
  ] = productsWithMonthlyOrYearlyPrice.filter(({
    price: {
      id = '',
    } = {},
  }) => (
    id === selectedPriceId
  ));

  return {
    t,
    step,
    isInitiating,
    products,
    goNext,
    goPrevious,
    productsWithMonthlyOrYearlyPrice,
    selectPlan,
    isShowingMonthlyPrice,
    toggleYearlyOrMonthlyPrice,
    selectedPriceId,
    productName,
  };
};

export default useSubscribePage;
